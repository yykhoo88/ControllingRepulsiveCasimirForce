function [psi, dim] = getPsiFromNLM(psiList, N,L,M)
% getPsiFromNLM Finds an entry in psiList representing state |N,L,M>
%   [psi, dim] = getPsiFromNLM(psiList, N,L,M) attempts to find an entry
%   in the structure array psiList corresponding to state |N,L,M>. psiList is
%   typically generated by generateWavefunctionList(). If a wavefunction
%   representing the state |N,L,M> is not found in psiList, an error is raised.
%
%   The function returns the found wavefunction, psi, and a dimension vector,
%   dim. psi is an NxNxN array containing the wavefunction. dim is an N element 
%   vector mapping the (i,j,k) element of psi to a point in space [dim(i), 
%   dim(j), dim(k)]. N,L and M are the principal quantum number, total angular
%   momentum quantum number and the z-projection of the angular momentum
%   respectively.
%
%   Example:
%
%     Find and plot the wavefunction with N=2,L=1,M=-1 :
%       [psi, dim] = getPsiFromNLM(psiList,2,1,-1);
%       plot(psi,dim);

% Copyright 2009 The MathWorks, Inc.

%   Ensure state parameters are sane

if N < 1
    error('Wavefunction:invalidArgument', ...
        'N out of range. Valid range : N >= 1');
elseif abs(M) > L
    error('Wavefunction:invalidArgument', ...
        'M out of range. Valid range : -l <= M <= +l');
elseif L >= N 
    error('Wavefunction:invalidArgument', ...
        'L out of range. Valid range : L < n');
end


% Generate a boolean array. Each true element signifies the index of a
% matching state.
matchingIndices = arrayfun( @(x)( x.N==N && x.L==L && x.M==M ), psiList);

if ~any( matchingIndices )
    error('Wavefunction:noWavefunctionFound' , ...
        ['Could not find an entry in psiList containing' ...
        'the state N=%d,L=%d,M=%d\n'] , N, L, M);
end

% Extract all matching states into matchingEntries.
matchingEntries = psiList(matchingIndices);

% There may be more than one matching entry; We return the 1st match.
psi = matchingEntries(1).psi;
dim = matchingEntries(1).dim;


